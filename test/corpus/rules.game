=====
Grouping
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  {} {} {}
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (body))
      (rule
        (body))
      (rule
        (body)))))

=====
Looping and Parallelism
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  for value in [] {
  }
  while true {
  }
  parallel for value in [] {
  }
  in parallel {
  }
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (for
          (identifier)
          (expression
            (list_literal))
              (body)))
      (rule
        (loop
          (expression
            (boolean))
          (body)))
      (rule
        (parallel_for
          (identifier)
          (expression
            (list_literal))
          (body)))
      (rule
        (in_parallel
          (body))))))

=====
Match
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  match [a, b] {
    4 => {}
    [] + [] => {}
  }
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (match
          (expression
            (list_literal
              (expression_list
                (expression
                  (identifier))
                (expression
                  (identifier)))))
          (match_entry
            (expression
              (number))
            (body))
          (match_entry
            (expression
              (expression
                (list_literal))
              (expression
                (list_literal)))
            (body)))))))


=====
List Operations
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  extend some.list with [];
  reverse some.list;
  shuffle some.list;
  sort some.list;
  sort some.list by key1;
  deal a + b to [] + [] from [] + [];
  deal 0 to all from [];
  discard a + b from some.list;
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (extend
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (list_literal))))
      (rule
        (reverse
          (qualified_identifier
            (identifier)
            (identifier))))
      (rule
        (shuffle
          (qualified_identifier
            (identifier)
            (identifier))))
      (rule
        (sort
          (qualified_identifier
            (identifier)
            (identifier))))
      (rule
        (sort
          (qualified_identifier
            (identifier)
            (identifier))
          (qualified_identifier
            (identifier))))
      (rule
        (deal
          (expression
            (expression
              (identifier))
            (expression
              (identifier)))
          (player_set
            (expression
              (expression
                (list_literal))
              (expression
                (list_literal))))
          (expression
            (expression
              (list_literal))
            (expression
              (list_literal)))))
      (rule
        (deal
          (expression
            (number))
          (player_set)
          (expression
            (list_literal))))
      (rule
        (discard
          (expression
            (expression
              (identifier))
            (expression
              (identifier)))
          (qualified_identifier
            (identifier)
            (identifier)))))))

=====
Assignment
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  some.id <- a + b;
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (assignment
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (expression
              (identifier))
            (expression
              (identifier))))))))

=====
Timing
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  time for a + b { }
  time for 6 at most {}
  time for 6 exactly {}
  time for 6 in some.flag {}
  time for 6 exactly in some.flag {}
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (timer
          (expression
            (expression
              (identifier))
            (expression
              (identifier)))
          (body)))
      (rule
        (timer
          (expression
            (number))
          (body)))
      (rule
        (timer
          (expression
            (number))
          (body)))
      (rule
        (timer
          (expression
            (number))
          (qualified_identifier
            (identifier)
            (identifier))
          (body)))
      (rule
        (timer
          (expression
            (number))
          (qualified_identifier
            (identifier)
            (identifier))
          (body))))))

=====
Input
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  input choice to a.player {
    prompt: "Enter your choice"
    choices: ["First", "Second", "Third"]
    target: chosen
    timeout: 6
  }
  input choice to a.player {
    prompt: "Enter your choice"
    choices: ["First"]
    target: chosen
  }
  input text to a.player {
    prompt: "Enter some text"
    target: text
    timeout: 6
  }
  input text to a.player {
    prompt: "Enter some text"
    target: text
  }
  input range to a.player {
    prompt: "Choose a value in range"
    range: (0, 7)
    target: range
    timeout: 6
  }
  input range to a.player {
    prompt: "Choose a value in range"
    range: (0, 7)
    target: range
  }
  input vote to a.player {
    prompt: "Vote for an option"
    choices: ["one", "two"]
    target: vote_results
    timeout: 6
  }
  input vote to all anonymously {
    prompt: "Vote for an option"
    choices: ["one", "two"]
    target: range
  }
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (input_choice
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (expression
            (list_literal
              (expression_list
                (expression
                  (quoted_string))
                (expression
                  (quoted_string))
                (expression
                  (quoted_string)))))
          (qualified_identifier
            (identifier))
          (expression
            (number))))
      (rule
        (input_choice
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (expression
            (list_literal
              (expression_list
                (expression
                  (quoted_string)))))
          (qualified_identifier
            (identifier))))
      (rule
        (input_text
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (qualified_identifier
            (identifier))
          (expression
            (number))))
      (rule
        (input_text
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (qualified_identifier
            (identifier))))
      (rule
        (input_range
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (number_range
            (number)
            (number))
          (qualified_identifier
            (identifier))
          (expression
            (number))))
      (rule
        (input_range
          (qualified_identifier
            (identifier)
            (identifier))
          (expression
            (quoted_string))
          (number_range
            (number)
            (number))
          (qualified_identifier
            (identifier))))
      (rule
        (input_vote
          (player_set
            (expression
              (expression
                (identifier))
              (identifier)))
          (expression
            (quoted_string))
          (expression
            (list_literal
              (expression_list
                (expression
                  (quoted_string))
                (expression
                  (quoted_string)))))
          (qualified_identifier
            (identifier))
          (expression
            (number))))
      (rule
        (input_vote
          (player_set)
          (expression
            (quoted_string))
          (expression
            (list_literal
              (expression_list
                (expression
                  (quoted_string))
                (expression
                  (quoted_string)))))
          (qualified_identifier
            (identifier)))))))

=====
Output
=====

configuration {
  name: ""
  player range: (0, 0)
  audience: false
  setup: {}
}
constants {}
variables {}
per-player {}
per-audience {}
rules {
  message [] "" + "";
  message all "some message";
  scores ["key1", "key2", "key3"];
}

-----

(game
  (configuration
    (quoted_string)
    (number_range
      (number)
      (number))
    (boolean))
  (constants
    (value_map))
  (variables
    (value_map))
  (per_player
    (value_map))
  (per_audience
    (value_map))
  (rules
    (body
      (rule
        (message
          (player_set
            (expression
              (list_literal)))
          (expression
            (expression
              (quoted_string))
            (expression
              (quoted_string)))))
      (rule
        (message
          (player_set)
          (expression
            (quoted_string))))
      (rule
        (scores
          (list_literal
            (expression_list
              (expression
                (quoted_string))
              (expression
                (quoted_string))
              (expression
                (quoted_string)))))))))

